#!/usr/bin/env python3
#coding=utf8

from dex import DexFile, simplify

COLOR_CATCH         = '#cc000066'
COLOR_CATCH_TEXT    = '#99000066'
COLOR_SWITCH        = '#0099cc'
COLOR_SWITCH_TEXT   = '#0033cc'
COLOR_COND_OK       = '#00cc00'

COLOR_IMPLICIT      = '#999999'

def dumpdot(func, config):
	blocks = func.blocks

	def esc(s):
		return s.replace('\\', '\\\\').replace('"', '\\"')

	def join(adict):
		return '[%s]' % ','.join('%s="%s"' % item for item in adict.items())

	print('digraph {')

	attrs = {}
	attrs['splines'] = 'ortho'
	attrs['ranksep'] = '2'
	print('graph', join(attrs))

	attrs = {}
	attrs['shape'] = 'box'
	attrs['fontname'] = 'monospace'
	print('node', join(attrs))

	# first, print all nodes
	for block in blocks:
		simplify(block, config)
		attrs = {}
		if block.ops:
			ins = zip(block.addrs, map(esc, block.ops), map(esc, block.args))
			ins = r'\l'.join('%04x: %-20s %s' % junk for junk in ins)
			attrs['label'] = block.name + r'\n\n' + ins + r'\l'
		elif block.name.startswith('func_'):
			if block.name == 'func_entry':
				# entry block
				info = block.name + r'\n'
				info += r'\nclass:     ' + func.clazz
				info += r'\lname:      ' + func.name
				info += r'\ltype:      ' + func.type
				info += r'\laccess:    ' + hex(func.access)
				info += r'\lbyte addr: ' + hex(func.fileoff)
				info += r'\l#regs:     ' + str(func.regcount)
				info += r'\l'
				attrs['label'] = info
			attrs['fontcolor'] = COLOR_IMPLICIT
			attrs['style'] = 'dashed'
		if 'move-exception' in block.ops:
			attrs['color'] = COLOR_CATCH
		print(block.name, join(attrs))

	# then, all the edges
	for block in blocks:
		assert block.succ is not None
		for cond, target in block.succ.items():
			attrs = {}
			if type(cond) is int:
				attrs['color'] = COLOR_SWITCH
				attrs['taillabel'] = str(cond)
				attrs['labelfontcolor'] = COLOR_SWITCH_TEXT
			elif cond is True:
				attrs['color'] = COLOR_COND_OK
			print(block.name, '->', target.name, join(attrs))
		for caught, target in block.catches.items():
			attrs = {}
			attrs['color'] = COLOR_CATCH
			attrs['taillabel'] = caught
			attrs['labelfontcolor'] = COLOR_CATCH_TEXT
			attrs['style'] = 'dotted'
			print(block.name, '->', target.name, join(attrs))

	print('}')

def _parseargs():
	import sys
	import argparse

	parser = argparse.ArgumentParser(
		description='Create a .dot graph from a dalvik function')

	parser.add_argument('dexpath', metavar='filepath', type=str,
		help='path to apk, jar, zip or dex file')
	parser.add_argument('clazz', metavar='class', type=str,
		help='e.g. "Ljava/lang/String;"')
	parser.add_argument('name', metavar='methodname', type=str,
		help='e.g. "replace"')
	parser.add_argument('type', metavar='methodtype', type=str,
		help='e.g. "(CC)Ljava/lang/String;"')

	parser.add_argument('-s', '--simple-syntax', action='store_true',
		dest='simplify', help='rewrite some instructions in a Java-like syntax')

	return parser.parse_args()

if __name__ == '__main__':
	args = _parseargs()
	import sys
	df = DexFile(args.dexpath)
	func = df.getfunc(args.clazz, args.name, args.type)
	dumpdot(func, args)
